h2 DB 연결할 시
전에 Spring 입문 강의에서도 사용했던 h2 test DB가 남아있었기에 약간 헷갈렸다.
하지만 이는 상관없고 처음 DB를 만들 때의 작업인 파일 접근을 이용하면 DB가 생성되는 것
db가 생성된걸 확인한 그 다음에는 tcp를 이용한 네트워크 접속을 하면 정상적으로 접근이 가능하다.

jdbc:h2:~/jpashop  // 파일모드 접근
jdbc:h2:tcp://localhost/~/jpashop  // 네트워크모드 접근

윈도우 cmd 명령어
다른 드라이브로 넘어가고 싶을 땐 cd를 붙히지 않고 C: 나 D:로 사용

///////////////////////////////////////////////////////////////////////////////////////////////

최근 설정은 스프링 부트를 통해 사용하면서 복잡한 설정이 모두 자동화 되었다.
그래도 필요한 것이 있으면, spring boot 매뉴얼을 보고 application.yml을 설정해서 사용하는 것을 권장함

implementation("com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.7.1") 를 통해 로그도 찍어보았다.
성능테스트를 통해 배포에도 사용할 것인지는 고민해봐야만 한다. 병목 등이 일어날 수 있으므로...

///////////////////////////////////////////////////////////////////////////////////////////////

실무에서는 가급적 Getter는 열어두고, Setter는 꼭 필요한 경우에만 사용하는 것을 추천
Setter는 값이 변경되는 것이기에 문제가 생길 가능성이 있다...

엔티티 식별자는 id를 사용하고 PK 컬럼명은 테이블명_id 등으로 사용한다.

실무에서는 ManyToMany를 사용하지 말자
중간테이블을 생성해야만 하는데, 이 테이블을 수정 할 수가 없어서 문제가 생긴다.

***** 모든 연관관계는 지연로딩으로 설정을 해야한다!
연관된 테이블들의 쿼리문이 전부 작성된다...
ManyToOne, OneToOne 처럼 XToOne 의 기본 fetch 전략이 Eager(즉시 로딩)이다... 이런 것들을 바꿔줘야 한다.

컬렉션은 필드에서 초기화 하자... (생성 자체에서 초기화하자)
null 문제에서 안전해지고, 영속화 할 때 hibernate의 내장 컬렉션으로 변경된다.

Spring Physical Strategy 테이블, 칼럼명 생성 전략
카멜케이스를 언더스코어 케이스로 바꾼다...
나는 언더스코어 유저였지만, 코드내에선 카멜케이스를 쓰고 DB에서 사용하는 걸로하자.

///////////////////////////////////////////////////////////////////////////////////////////////

양방향 연관관계에서의 mapppedBy 속성을 이용하면 연관관계의 주인을 정할 수 있다.
mappedBy를 사용하는 쪽이 주인, 외래 키를 관리해야핢 == 외래키가 있는 곳(테이블)이 주인이 된다.
이런 식으로 했을 때 연관관계의 주인이 아닌 테이블에서 값을 넣거나 한다면 누락되는 경우가 발생 할 수 있다.
이런 것을 막기위해 사용하는 것이 연관관계 편의 메서드이다.
한번에 양방향 관계를 설정 할 수 있다.

참고 - https://velog.io/@conatuseus/%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84-%EB%A7%A4%ED%95%91-%EA%B8%B0%EC%B4%88-2-%EC%96%91%EB%B0%A9%ED%96%A5-%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84%EC%99%80-%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84%EC%9D%98-%EC%A3%BC%EC%9D%B8

///////////////////////////////////////////////////////////////////////////////////////////////

JPA의 진짜 엄청난 장점
우리가 서비스 단에서 값을 변경하고 일일히 DB에 업데이트 해주지 않아도
entity를 통해 값만 바꿔주면 JPA가 바뀐 값들을 dirty checking(변경내역 감지)를 해서 업데이트 쿼리를 날려준다...

도메인 모델 패턴 (jpa, orm 등)
엔티티에 비즈니스 로직을 넣고 객체 지향의 특성을 적극 활용하는 것

트랜잭션 스크립트 패턴
일반 sql 다룰 때(아마 우리가 지금 까지 코딩한 스타일?)

// 옳고 그름은 없지만 현재 문맥에 따라 맞는 패턴을 쓰는 것이 좋다.

